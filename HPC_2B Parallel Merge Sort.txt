/*

Write a program to implement Parallel Merge Sort. Use existing algorithms
and measure the performance of sequential and parallel algorithms.
*/
#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

void merge(vector<int>& arr, int left, int middle, int right) {
    int i, j, k;
    int n1 = middle - left + 1;
    int n2 = right - middle;
 
    vector<int> L(n1), R(n2);
 
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];
 
    i = 0;
    j = 0;
    k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) {
        return;
    }

    int middle = left + (right - left) / 2;

    #pragma omp parallel sections num_threads(2)
    {
        #pragma omp section
        {
            mergeSort(arr, left, middle);
        }

        #pragma omp section
        {
            mergeSort(arr, middle + 1, right);
        }
    }

    merge(arr, left, middle, right);
}

int main() {
    vector<int> arr = { 12, 11, 13, 5, 6, 7 };
    int n = arr.size();
 
    mergeSort(arr, 0, n - 1);
 
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
 
    return 0;
}

---------------------------------------------------------------------------------------------
What are OpenMP libraries?
OpenMP is a library for parallel programming in the SMP (symmetric multi-processors, or shared-memory processors) model. When programming with OpenMP, all threads share memory and data. OpenMP supports C, C++ and Fortran. The OpenMP functions are included in a header file called omp. h .


Vectors in C++ are sequence containers representing arrays that can change their size during runtime. They use contiguous storage locations for their elements just as efficiently as in arrays, which means that their elements can also be accessed using offsets on regular pointers to its elements.


---------------------------------------------------------------------------------------------

 The code is a function that sorts an array of integers.
 The function takes two parameters, the first being the number of elements in the input array and the second being the index at which to start sorting.
 The code starts by declaring a vector called arr with five integer values 12, 11, 13, 5, 6.
 It then declares an int variable n equal to arr's size (5).
 Next it declares a parallel section for num_threads(2) and enters into this section where it calls mergeSort() on arr starting from 0 up until n-1.
 After calling mergeSort(), it prints out "Sorted array: " followed by each value in order from left to right before exiting back into main().
 The code attempts to sort a vector of integers.
 The code uses the mergeSort function to do this, which takes two arguments: an initial value for the leftmost element in the array and a final value for the rightmost element in the array.
 The first section of code iterates over all elements from 0 to n-1, calling mergeSort on each one.
 After that, it prints out all sorted values in order from 0 to n-1.
